# coding: utf-8
import os
import logging

logger = logging.getLogger("canarie-api-config")

MY_SERVER_NAME = 'https://${PAVICS_FQDN_PUBLIC}/canarie'

DATABASE = {
    'filename': '/opt/local/src/CanarieAPI/stats.db',
    'access_log': '/var/log/nginx/access_file.log',
    'log_pid': '/var/run/nginx.pid'
}

SERVICES = {
    'node': {
        'info': {
            'name': 'Node',
            'synopsis': 'Nodes are data, compute and index endpoints accessed through the PAVICS platform or external clients. The Node service is the backend that allows: data storage, harvesting, indexation and discovery of local and federated data; authentication and authorization; server registration and management. Node service is therefore composed of several other services.',
            'version': '1.2.2',
            'institution': '${SERVER_INSTITUTION}',
            'releaseTime': '2019-06-22T00:00:00Z',
            'researchSubject': 'Climatology',
            'supportEmail': '${SUPPORT_EMAIL}',
            'category': 'Resource/Cloud Management',
            'tags': ['Climatology', 'Cloud']
        },
        'stats': {
            'method': '.*',
            'route': '/(magpie|geoserver|thredds|wpsoutputs|jupyter)/.*'
        },
        'redirect': {
            'doc': 'https://ouranosinc.github.io/pavics-sdi/arch/backend.html',
            'releasenotes': 'https://ouranosinc.github.io/pavics-sdi/releasenotes.html',
            'support': '${SUPPORT_URL}',
            'source': 'https://github.com/Ouranosinc/pavics-sdi',
            'tryme': 'https://pavics.ouranos.ca',
            'licence': 'https://ouranosinc.github.io/pavics-sdi/license.html',
            'provenance': 'https://ouranosinc.github.io/pavics-sdi/provenance/index.html'
        },
        'monitoring': {
            'Magpie': {
                'request': {
                    'url': 'https://${PAVICS_FQDN_PUBLIC}/magpie/version'
                },
                'response': {
                    'text': '\{.*"code": 200.*"type": "application/json".*\}'
                }
            },
            'Twitcher': {
                'request': {
                    'url': 'https://${PAVICS_FQDN_PUBLIC}/twitcher/ows/proxy/flyingpigeon?service=WPS&version=1.0.0&request=GetCapabilities'
                }
            },
            'Geoserver': {
                'request': {
                    'url': 'https://${PAVICS_FQDN_PUBLIC}/geoserver/web/'
                }
            },
            'Phoenix': {
                'request': {
                    'url': 'https://${PAVICS_FQDN_PUBLIC}/geoserver/web/'
                }
            },
            'Catalog': {
                'request': {
                    'url': 'http://${PAVICS_FQDN}:8086/pywps?service=WPS&version=1.0.0&request=GetCapabilities'
                }
            },
            'Malleefowl': {
                'request': {
                    'url': 'http://${PAVICS_FQDN}:8091/wps?service=WPS&version=1.0.0&request=GetCapabilities'
                }
            },
            'Finch': {
                'request': {
                    'url': 'http://${PAVICS_FQDN}:8095/wps?service=WPS&version=1.0.0&request=GetCapabilities'
                }
            },
            'Raven': {
                'request': {
                    'url': 'http://${PAVICS_FQDN}:8096/wps?service=WPS&version=1.0.0&request=GetCapabilities'
                }
            },
            'Solr': {
                'request': {
                    'url': 'http://${PAVICS_FQDN}:8983/solr/birdhouse/select?q=CMIP5&fq=model:MPI-ESM-MR&fq=experiment:rcp45&fq=variable:tasmax&fq=institute:MPI-M&fq=frequency:mon&wt=json'
                },
                'response': {
                    'text': '.*catalog_url\":\".+/testdata/flyingpigeon/cmip5.*/catalog.xml.*'
                }
            },
            'Thredds': {
                'request': {
                    'url': 'http://${PAVICS_FQDN}:8083${TWITCHER_PROTECTED_PATH}/thredds/catalog.html'
                }
            },
            'Jupyter': {
                'request': {
                    'url': 'https://${PAVICS_FQDN_PUBLIC}/jupyter/hub/login'
                },
            },
            'Weaver': {
                'request': {
                    'url': 'https://${PAVICS_FQDN_PUBLIC}/weaver'
                },
            },
        }
    },
    'indices': {
        'info': {
            'name': 'Climate indices',
            'synopsis': 'Users of climate data are interested in specific indices such as the number of freeze-thaw cycles, the number of degree-days of cooling, the duration of heatwaves, etc. This returns annual values of the most popular climate indices.',
            'version': '0.2.4',
            'institution': '${SERVER_INSTITUTION}',
            'releaseTime': '2019-05-27T00:00:00Z',
            'researchSubject': 'Climatology',
            'supportEmail': '${SUPPORT_EMAIL}',
            'category': 'Data Manipulation',
            'tags': ['Climatology', 'Cloud']
        },
        'stats': {
            'method': '.*',
            'route': '${TWITCHER_PROTECTED_PATH}/finch.*'
        },
        'redirect': {
            'doc': 'https://finch.readthedocs.io/en/latest/index.html',
            'releasenotes': 'https://github.com/bird-house/finch/releases',
            'support': '${SUPPORT_URL}',
            'source': 'https://github.com/bird-house/finch',
            'tryme': 'https://ouranosinc.github.io/pavics-sdi/notebooks/climate_indices.html',
            'licence': 'https://ouranosinc.github.io/pavics-sdi/license.html',
            'provenance': 'https://ouranosinc.github.io/pavics-sdi/provenance/index.html'
        },
        'monitoring': {
            'Finch': {
                'request': {
                    'url': 'https://${PAVICS_FQDN_PUBLIC}${TWITCHER_PROTECTED_PATH}/finch?service=WPS&version=1.0.0&request=GetCapabilities'
                }
            },
        }
    },
    'raven': {
        'info': {
            'name': 'Hydrological modeling and analysis',
            'synopsis': ('A suite of WPS processes to calibrate and run hydrological models, including geographical'
            'information retrieval and processing as well as time series analysis.'),
            'version': '0.7.0',
            'institution': '${SERVER_INSTITUTION}',
            'releaseTime': '2019-06-05T00:00:00Z',
            'researchSubject': 'Hydrology',
            'supportEmail': '${SUPPORT_EMAIL}',
            'category': 'Data Manipulation',
            'tags': ['Hydrology']
        },
        'stats': {
            'method': '.*',
            'route': '${TWITCHER_PROTECTED_PATH}/raven.*'
        },
        'redirect': {
            'doc': 'https://pavics-raven.readthedocs.io/en/latest/',
            'releasenotes': 'https://github.com/Ouranosinc/raven/releases',
            'support': '${SUPPORT_URL}',
            'source': 'https://github.com/Ouranosinc/raven',
            'tryme': 'https://pavics-raven.readthedocs.io/en/latest/processes.html',
            'licence': 'https://ouranosinc.github.io/pavics-sdi/license.html',
            'provenance': 'https://ouranosinc.github.io/pavics-sdi/provenance/index.html'
        },
        'monitoring': {
            'Raven': {
                'request': {
                    'url': 'https://${PAVICS_FQDN_PUBLIC}${TWITCHER_PROTECTED_PATH}/raven?service=WPS&version=1.0.0&request=GetCapabilities'
                }
            },
        }
    },
    'renderer': {
        'info': {
            'name': 'High-resolution spatial gridded data renderer',
            'synopsis': 'This service renders gridded data on the server and sends images to the client for display within mapping applications using Open Geospatial Consortium (OGC) Web Mappping Service (WMS) standard.',
            'version': '1.0.0',
            'institution': '${SERVER_INSTITUTION}',
            'releaseTime': '2017-10-05T00:00:00Z',
            'researchSubject': 'Climatology',
            'supportEmail': '${SUPPORT_EMAIL}',
            'category': 'Data Manipulation',
            'tags': ['Climatology', 'Cloud']
        },
        'stats': {
            'method': '.*',
            'route': '/ncWMS2/.*'
        },
        'redirect': {
            'doc': 'https://ouranosinc.github.io/pavics-sdi/arch/frontend.html#gridded-data-rendering',
            'releasenotes': 'https://github.com/Reading-eScience-Centre/ncwms/releases/tag/ncwms-2.4.1',
            'support': '${SUPPORT_URL}',
            'source': 'https://hub.docker.com/r/pavics/ncwms2/',
            'tryme': 'https://ouranosinc.github.io/pavics-sdi/notebooks/rendering.html',
            'licence': 'https://ouranosinc.github.io/pavics-sdi/license.html',
            'provenance': 'https://ouranosinc.github.io/pavics-sdi/provenance/index.html'
        },
        'monitoring': {
            'ncWMS': {
                'request': {
                    'url': 'https://${PAVICS_FQDN_PUBLIC}/ncWMS2/wms?SERVICE=WMS&REQUEST=GetCapabilities&VERSION=1.3.0'
                }
            },
        }
    },
    'slicer': {
        'info': {
            'name': 'Spatial and temporal data slicer',
            'synopsis': 'This service allows the subsetting and download of NetCDF data using OPEnDAP protocol.',
            'version': '1.0.0',
            'institution': '${SERVER_INSTITUTION}',
            'releaseTime': '2017-10-05T00:00:00Z',
            'researchSubject': 'Climatology',
            'supportEmail': '${SUPPORT_EMAIL}',
            'category': 'Data Manipulation',
            'tags': ['Climatology', 'Cloud']
        },
        'stats': {
            'method': '.*',
            'route': '${TWITCHER_PROTECTED_PATH}/flyingpigeon.*'
        },
        'redirect': {
            'doc': 'https://ouranosinc.github.io/pavics-sdi/processes/basic_climate.html#spatial-and-temporal-subsetting',
            'releasenotes': 'https://github.com/Ouranosinc/flyingpigeon/releases/tag/pavics-0.4.3',
            'support': '${SUPPORT_URL}',
            'source': 'https://github.com/Ouranosinc/flyingpigeon/blob/master/flyingpigeon/processes/wps_subset_WFS.py',
            'tryme': 'https://ouranosinc.github.io/pavics-sdi/notebooks/subsetting.html',
            'licence': 'https://ouranosinc.github.io/pavics-sdi/license.html',
            'provenance': 'https://ouranosinc.github.io/pavics-sdi/provenance/index.html'
        },
        'monitoring': {
            'Flyingpigeon': {
                'request': {
                    'url': 'https://${PAVICS_FQDN_PUBLIC}${TWITCHER_PROTECTED_PATH}/flyingpigeon?service=WPS&version=1.0.0&request=GetCapabilities'
                }
            },
        }
    }
}

PLATFORMS = {
    'pavics': {
        'info': {
            'name': 'PAVICS',
            'synopsis': '${SERVER_SYNOPSIS}',
            'version': '1.2.2',
            'institution': '${SERVER_INSTITUTION}',
            'releaseTime': '2019-06-17T00:00:00Z',
            'researchSubject': 'Climatology',
            'supportEmail': '${SUPPORT_EMAIL}',
            'tags': ['Climatology', 'Cloud']
        },
        'stats': {
            'method': '.*',
            'route': '/project-api/.*'
        },
        'redirect': {
            'doc': 'https://ouranosinc.github.io/pavics-sdi',
            'releasenotes': 'https://ouranosinc.github.io/pavics-sdi/releasenotes.html',
            'support': '${SUPPORT_URL}',
            'source': 'https://github.com/Ouranosinc/pavics-sdi',
            'tryme': 'https://pavics.ouranos.ca',
            'licence': 'https://ouranosinc.github.io/pavics-sdi/license.html',
            'provenance': 'https://ouranosinc.github.io/pavics-sdi/provenance/index.html',
            'factsheet': 'http://www.canarie.ca/software/pavics'
        },
        'monitoring': {
            'Frontend': {
                'request': {
                    'url': 'https://${PAVICS_FQDN_PUBLIC}'
                }
            },
            'Project': {
                'request': {
                    'url': 'https://${PAVICS_FQDN_PUBLIC}/project-api/explorer/'
                }
            },
        }
    }
}

CANARIE_MONITORING_EXTRA_CONF_DIR = os.environ.get(
    'CANARIE_MONITORING_EXTRA_CONF_DIR', '/bogus-notexist')

if os.path.exists(CANARIE_MONITORING_EXTRA_CONF_DIR):
    # alphabetically sorted for reproducible override precedence
    for extra_conf in sorted(os.listdir(CANARIE_MONITORING_EXTRA_CONF_DIR)):
        extra_conf_full_path = "{CANARIE_MONITORING_EXTRA_CONF_DIR}/{extra_conf}".format(**locals())
        # only handle files ending with .py
        if os.path.isfile(extra_conf_full_path) and extra_conf_full_path.endswith(".py"):
            logger.info("canarie-api: loading extra config '{extra_conf_full_path}'".format(**locals()))
            execfile(extra_conf_full_path)
        else:
            logger.info("canarie-api: ignoring extra config '{extra_conf_full_path}'".format(**locals()))
