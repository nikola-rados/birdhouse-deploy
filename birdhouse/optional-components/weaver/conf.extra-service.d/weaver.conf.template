    location /${WEAVER_MANAGER_NAME}/ {
        # redirect to secured EMS/ADES
        return 302 ${SERVER_PROTOCOL}://${PAVICS_FQDN}${TWITCHER_ROOT}${TWITCHER_PROXY_PATH}/${WEAVER_MANAGER_NAME}/;
    }

    location /${WEAVER_WORKER_NAME}/ {
        # redirect to secured worker
        return 302 ${SERVER_PROTOCOL}://${PAVICS_FQDN}${TWITCHER_ROOT}${TWITCHER_PROXY_PATH}/${WEAVER_WORKER_NAME}/;
    }

    # NOTE:
    #   - Internal network redirect of twitcher with Weaver's WPS for same reason for Weaver API service.
    #   - Handle either direct WPS endpoint or with Weaver's root as prefix.
    #     The prefixed route is what is defined within Weaver's configuration to resolve process execution endpoint.
    #   - Since both WPS and API routes *potentially* start with the same Weaver root, this one MUST be placed first
    #     to priorize its regex match with extra WPS path, otherwise Weaver API 'any-path' regex will match before.
    location ~* (${WEAVER_ROOT})?${WEAVER_WPS_PATH}(?<extra>.*)$ {
        proxy_pass http://twitcher:8000${TWITCHER_PROXY_PATH}/${WEAVER_WPS_NAME}$extra$is_args$args;
        proxy_set_header Host $host;
        proxy_buffering off;
        include /etc/nginx/conf.d/cors.include;
    }

    # NOTE:
    #   Redirect to internal network of twitcher with "${WEAVER_ROOT}" route allows to set
    #   the same 'magpie' permissions on the 'weaver' service named "${WEAVER_MANAGER_NAME}".
    #   This allows verification of the same service user/group permissions references regardless
    #   whether the 'shortcut' "${WEAVER_ROOT}" route or the full 'twitcher' proxy route is used.
    location ~* ${WEAVER_ROOT}/(?<extra>.*)$ {
        proxy_pass http://twitcher:8000${TWITCHER_PROXY_PATH}/${WEAVER_MANAGER_NAME}/$extra$is_args$args;
        proxy_set_header Host $host;
        proxy_buffering off;
        include /etc/nginx/conf.d/cors.include;
    }

    location ^~ ${WEAVER_WPS_OUTPUTS_PATH}/ {
        alias ${WEAVER_WPS_OUTPUTS_DIR}/;
    }
